
  # - name: Give via sudo permission. Will be removed at the end of installation.
  #   copy:
  #     content: 'via ALL=(ALL) NOPASSWD:ALL'
  #     dest: /etc/sudoers.d/via
  #     owner: root
  #     group: root


  #
  # Sysctl settings
  #
  # - name: Reduce swappiness. Use memory first. Better for MongoDB.
  #   sysctl:
  #     name: "vm.swappiness"
  #     value: "1"
  #     state: present


  - name: Environment file
    become_user: root
    template:
      src: files/via.env.j2
      dest: /etc/profile.d/Z99-via.sh
      owner: root
      group: root

  - name: Copy SSH config
    copy:
      src: files/ssh/config
      dest: "/home/{{remoteUser}}/.ssh/config"
      owner: "{{remoteUser}}"
      group: "{{remoteUser}}"

  - name: Set up multiple authorized keys
    authorized_key:
      user: "{{remoteUser}}"
      state: present
      key: "{{lookup('file', item)}}"
    with_fileglob:
      - "files/ssh/authorized_keys/*"

  #
  # hosts file
  #
  - name: local via domain in hosts file
    lineinfile:
      path: /etc/hosts
      line: 127.0.0.1 via.local

  - name: Ensure hostname is resolved in hosts file
    lineinfile:
      path: /etc/hosts
      line: "127.0.0.1 {{ansible_hostname}}"
      
        
  - name: Install basic apt packages
    apt:
      name: ['unattended-upgrades', 'monit', 'git', 'imagemagick', 'htop', 'unzip', 'zip', 'aptitude', 'mosh', 'python3-pip', 'mediainfo', 'ffmpeg', 'sox', 'libsox-fmt-all', 'wkhtmltopdf', 'xpra', 'pigz', 'cronic', 'duplicity', 'iperf3' ]
      state: present

      
  # - name: Check if wkhtmltopdf is present
  #   stat:
  #     path: /usr/local/bin/wkhtmltopdf
  #   register: result
    
  # - name: Install special version of wkhtmltopdf
  #   apt:
  #     deb: https://downloads.wkhtmltopdf.org/0.12/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb
  #   when: result.stat.exists == false


  - name: ImageMagick policy File (to allow processing of PDF, ...)
    copy:
      src: files/imagemagick/policy.xml
      dest: /etc/ImageMagick-6/policy.xml
      owner: 'root'
      group: 'root'
      
      
  # - name: Install snaps
  #   snap:
  #     name:
  #       - pdftk
    


  # PHP (NGINX Upload helper)
  - name: PHP for nginx
    apt: pkg=php-fpm
  - name: via php.ini settings
    copy:
      src: files/nginx/php.ini
      dest: /etc/php/7.2/fpm/conf.d/99-via.ini
      owner: 'root'
      group: 'root'
    notify:
      - restart PHP

  
  #
  # NGINX WEBSERVER
  #
  - name: nginx.conf file
    template:
      src: files/nginx/nginx.conf.j2
      dest: /etc/nginx/nginx.conf
      owner: 'root'
      group: 'root'
    notify:
      - restart nginx

  - name: lib f√ºr htpasswd module
    when: via.isBeta
    apt: pkg=python3-passlib
  - name: htpasswd_betatest file
    when: via.isBeta
    htpasswd:
      path: /etc/nginx/htpasswd_betatest
      name: betatester
      password: "{{via.betaPassword}}"
      owner: root
      group: www-data
      mode: 0640
    
  - name: options-ssl-nginx.conf file
    copy:
      src: files/nginx/options-ssl-nginx.conf
      dest: /etc/letsencrypt/options-ssl-nginx.conf
      owner: 'root'
      group: 'root'
  - name: ssl-dhparams.pem file
    copy:
      src: files/nginx/ssl-dhparams.pem
      dest: /etc/letsencrypt/ssl-dhparams.pem
      owner: 'root'
      group: 'root'

    
  #
  # MONIT
  #
  - name: monitrc file
    register: monitconfig1
    copy:
      src: files/monitrc
      dest: /etc/monit/monitrc
      owner: 'root'
      group: 'root'
    notify:
      - restart monit

  - name: monit config for via
    register: monitconfig2
    template:
      src: files/monit_via.j2
      dest: /etc/monit/conf.d/via
      owner: 'root'
      group: 'root'
    notify:
      - restart monit


  #
  # Postfix Mail
  #
  - name: main.cf file
    template:
      src: files/postfix/main.cf.j2
      dest: /etc/postfix/main.cf
      owner: 'root'
      group: 'root'
  - name: postfix restart
    service:
      name: postfix
      enabled: yes
      state: restarted
  - name: root email alias to admin
    lineinfile:
      path: /etc/aliases
      line: "root: {{via.adminEmail}}"
    notify:
      - create postfix aliases

    
  #    
  # CRON JOBS
  #

  # TODO: Port 80 kann nicht gebraucht werden
  - name: set SHELL in cron (root)
    cron:
      env: yes
      name: SHELL
      job: /bin/bash
  - name: set MAILTO in cron (root)
    cron:
      env: yes
      name: MAILTO
      value: "{{via.adminEmail}}"
  - name: set PATH in cron (root)
    cron:
      env: yes
      name: PATH
      value: /usr/bin:/bin:/usr/local/bin
  - name: set SHELL in cron
    cron:
      user: "{{remoteUser}}"
      env: yes
      name: SHELL
      job: /bin/bash
  - name: set MAILTO in cron
    cron:
      user: "{{remoteUser}}"
      env: yes
      name: MAILTO
      value: "{{via.adminEmail}}"
  - name: set GS_HOME in cron
    cron:
      user: "{{remoteUser}}"
      env: yes
      name: GS_HOME
      value: /opt/GsDevKit_home
  - name: set PATH in cron
    cron:
      user: "{{remoteUser}}"
      env: yes
      name: PATH
      value: /opt/GsDevKit_home/bin:/usr/bin:/bin:/usr/local/bin
  - name: "cron: Certbot renew weekly"
    when: via.useSsl
    cron:
      name: certbot renew
      user: root
      minute: "1"
      hour: "1"
      weekday: "0"
      job: "cronic certbot --nginx renew"

# TODO Deactivate cronjob from apt package certbot
# Deactivate systemd timer (systemctl show certbot.timer)
# Because they do not work standalone (port 80 taken)

    
  # - name: trigger via hourly
  #   cron:
  #     name: hourly trigger
  #     user: "{{remoteUser}}"
  #     minute: "0"
  #     hour: "*"
  #     job: "cd {{via.installationPath}}/server && ./run-task.sh runHourlyTasks 240"
  # - name: trigger via 5 minutely
  #   cron:
  #     name: 5minutely trigger
  #     user: "{{remoteUser}}"
  #     minute: "*/5"
  #     hour: "*"
  #     job: "cd {{via.installationPath}}/server && ./run-task.sh run5MinutelyTasks"
  - name: Trigger via nightly
    cron:
      name: "Nightly trigger {{stoneName}}"
      user: "{{remoteUser}}"
      minute: "0"
      hour: "2"
      job: "cd {{via.installationPath}}/via_base/server && cronic ./executeSmalltalk.sh {{stoneName}} \"VIAApplicationManager current runNightlyTasks\" "
  - name: Backup cron job
    cron:
      name: "Backup {{stoneName}}"
      user: "{{remoteUser}}"
      minute: "0"
      hour: "3,12"
      job: "cd {{via.installationPath}}/via_base/server && cronic ./backup.sh {{stoneName}} {{via.backupTarget}}"

      
  # TODO
  # 0 1 * * * cd /opt/321via/repo/maintenance && ./delete_old_tranlogs.sh
  # 30 1 * * * cd /opt/321via/repo/maintenance && ./delete_old_tmp_files.sh


  #
  # Backup with duplicity (see also cron job above)
  #

  - name: duplicity credentials
    when: via.backupPassword is defined
    no_log: true
    copy:
      content: "FTP_PASSWORD={{via.backupPassword}}"
      dest: "{{via.installationPath}}/.duplicity.cred"
      owner: "{{remoteUser}}"
      group: "{{remoteUser}}"
      mode: 0600
  


  #
  # GemStone configuration
  #
  - name: Check if GemStone is already installed
    stat: 
      path: "/opt/GsDevKit_home/server/stones/{{stoneName}}/gem.conf"
    register: gemstone_exists

  - set_fact:
      gemstone_is_installed: True
    when: gemstone_exists.stat.exists == true
  
  - name: Update with our own gem.conf (only if already exists)
    when: gemstone_is_installed
    copy:
      src: "files/gemstone/gem.conf"
      dest: "/opt/GsDevKit_home/server/stones/{{stoneName}}/{{stoneName}}.conf"
      owner: "{{remoteUser}}"
      mode: 0644



  - include_tasks: tasks_firewall.yml
